{"/home/travis/build/npmtest/node-npmtest-segment/test.js":"/* istanbul instrument in package npmtest_segment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-segment/lib.npmtest_segment.js":"/* istanbul instrument in package npmtest_segment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_segment = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_segment = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-segment/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-segment && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_segment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_segment\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_segment.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_segment.rollup.js'] =\n            local.assetsDict['/assets.npmtest_segment.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_segment.__dirname + '/lib.npmtest_segment.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/index.js":"'use strict';\n\n/**\n * 中文分词器\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\n// 分词接口\nvar Segment = require('./lib/Segment');\nmodule.exports = exports = Segment;\nexports.Segment = Segment;\n\n// 词性接口\nexports.POSTAG = require('./lib/POSTAG');\n\n// 版本\nexports.version = require('./package.json').version;\n\n/*\n使用示例：\n\nvar segment = new Segment();\n// 使用默认的识别模块及字典\nsegment.useDefault();\n// 开始分词\nconsole.log(segment.doSegment('这是一个基于Node.js的中文分词模块。'));\n\n*/","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/Segment.js":"'use strict';\n\n/**\n * 分词器接口\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar POSTAG = require('./POSTAG');\nvar Tokenizer = require('./Tokenizer');\nvar Optimizer = require('./Optimizer');\n\nvar debug = console.log;\n\n\n/**\n * 创建分词器接口\n*/\nvar Segment = module.exports = function () {\n  this.POSTAG = POSTAG; // 词性\n  this.DICT = {};       // 词典表\n  this.modules = {\n    tokenizer:  [],     // 分词模块\n    optimizer:  []      // 优化模块\n  };\n  this.tokenizer = new Tokenizer(this);\n  this.optimizer = new Optimizer(this);\n};\n\n/**\n * 载入分词模块\n *\n * @param {String|Array|Object} module 模块名称(数组)或模块对象\n * @return {Segment}\n */\nSegment.prototype.use = function (module) {\n  var me = this;\n\n  if (Array.isArray(module)) {\n    module.forEach(function (module) {\n      me.use(module[i]);\n    });\n\n  } else {\n    if (typeof module == 'string') {\n      var filename = path.resolve(__dirname, 'module', module + '.js');\n      if (!fs.existsSync(filename)) {\n        throw Error('Cannot find module \"' + module + '\".');\n      } else {\n        module = require(filename);\n      }\n    }\n    // 初始化并注册模块\n    module.init(this);\n    this.modules[module.type].push(module);\n  }\n\n  return this;\n};\n\nSegment.prototype._resolveDictFilename = function (name) {\n  var filename = path.resolve(name);\n  if (!fs.existsSync(filename)) {\n    var filename = path.resolve(__dirname, '../dicts', name);\n    if (!fs.existsSync(filename)) {\n      throw Error('Cannot find dict file \"' + filename + '\".');\n    }\n  }\n  return filename;\n};\n\n/**\n * 载入字典文件\n *\n * @param {String} name 字典文件名\n * @param {String} type 类型\n * @param {Boolean} convert_to_lower 是否全部转换为小写\n * @return {Segment}\n */\nSegment.prototype.loadDict = function (name, type, convert_to_lower) {\n  var filename = this._resolveDictFilename(name);\n  if (!type)  type = 'TABLE';     // 默认为TABLE\n\n  // 初始化词典\n  if (!this.DICT[type]) this.DICT[type] = {};\n  if (!this.DICT[type + '2']) this.DICT[type + '2'] = {};\n  var TABLE = this.DICT[type];        // 词典表  '词' => {属性}\n  var TABLE2 = this.DICT[type + '2']; // 词典表  '长度' => '词' => 属性\n  // 导入数据\n  var POSTAG = this.POSTAG;\n  var data = fs.readFileSync(filename, 'utf8');\n  if (convert_to_lower) data = data.toLowerCase();\n\n  data.split(/\\r?\\n/).forEach(function (line) {\n    var blocks = line.split('|');\n    if (blocks.length > 2) {\n      var w = blocks[0].trim();\n      var p = Number(blocks[1]);\n      var f = Number(blocks[2]);\n\n      // 一定要检查单词是否为空，如果为空会导致Bug\n      if (w.length > 0) {\n        TABLE[w] = {f: f, p: p};\n        if (!TABLE2[w.length]) TABLE2[w.length] = {};\n        TABLE2[w.length][w] = TABLE[w];\n      }\n    }\n  });\n\n  return this;\n};\n\n/**\n * 取词典表\n *\n * @param {String} type 类型\n * @return {object}\n */\nSegment.prototype.getDict = function (type) {\n  return this.DICT[type];\n};\n\n/**\n * 载入同义词词典\n *\n * @param {String} name 字典文件名\n */\nSegment.prototype.loadSynonymDict = function (name) {\n  var filename = this._resolveDictFilename(name);\n  var type = 'SYNONYM';\n\n  // 初始化词典\n  if (!this.DICT[type]) this.DICT[type] = {};\n  var TABLE = this.DICT[type];        // 词典表  '同义词' => '标准词'\n  // 导入数据\n  var data = fs.readFileSync(filename, 'utf8');\n\n  data.split(/\\r?\\n/).forEach(function (line) {\n    var blocks = line.split(',');\n    if (blocks.length > 1) {\n      var n1 = blocks[0].trim();\n      var n2 = blocks[1].trim();\n      TABLE[n1] = n2;\n      if (TABLE[n2] === n1) {\n        delete TABLE[n2];\n      }\n    }\n  });\n\n  return this;\n};\n\n/**\n * 载入停止符词典\n *\n * @param {String} name 字典文件名\n */\nSegment.prototype.loadStopwordDict = function (name) {\n  var filename = this._resolveDictFilename(name);\n  var type = 'STOPWORD';\n\n  // 初始化词典\n  if (!this.DICT[type]) this.DICT[type] = {};\n  var TABLE = this.DICT[type];        // 词典表  '同义词' => '标准词'\n  // 导入数据\n  var data = fs.readFileSync(filename, 'utf8');\n\n  data.split(/\\r?\\n/).forEach(function (line) {\n    line = line.trim();\n    if (line) {\n      TABLE[line] = true;\n    }\n  });\n\n  return this;\n};\n\n/**\n * 使用默认的识别模块和字典文件\n *\n * @return {Segment}\n */\nSegment.prototype.useDefault = function () {\n  this\n    // 识别模块\n    // 强制分割类单词识别\n    .use('URLTokenizer')            // URL识别\n    .use('WildcardTokenizer')       // 通配符，必须在标点符号识别之前\n    .use('PunctuationTokenizer')    // 标点符号识别\n    .use('ForeignTokenizer')        // 外文字符、数字识别，必须在标点符号识别之后\n    // 中文单词识别\n    .use('DictTokenizer')           // 词典识别\n    .use('ChsNameTokenizer')        // 人名识别，建议在词典识别之后\n\n    // 优化模块\n    .use('EmailOptimizer')          // 邮箱地址识别\n    .use('ChsNameOptimizer')        // 人名识别优化\n    .use('DictOptimizer')           // 词典识别优化\n    .use('DatetimeOptimizer')       // 日期时间识别优化\n\n    // 字典文件\n    .loadDict('dict.txt')           // 盘古词典\n    .loadDict('dict2.txt')          // 扩展词典（用于调整原盘古词典）\n    .loadDict('dict3.txt')          // 扩展词典（用于调整原盘古词典）\n    .loadDict('names.txt')          // 常见名词、人名\n    .loadDict('wildcard.txt', 'WILDCARD', true)   // 通配符\n    .loadSynonymDict('synonym.txt')   // 同义词\n    .loadStopwordDict('stopword.txt') // 停止符\n  ;\n  return this;\n};\n\n/**\n * 开始分词\n *\n * @param {String} text 文本\n * @param {Object} options 选项\n *   - {Boolean} simple 是否仅返回单词内容\n *   - {Boolean} stripPunctuation 去除标点符号\n *   - {Boolean} convertSynonym 转换同义词\n *   - {Boolean} stripStopword 去除停止符\n * @return {Array}\n */\nSegment.prototype.doSegment = function (text, options) {\n  var me = this;\n  options = options || {};\n  var ret = [];\n\n  // 将文本按照换行符分割成多段，并逐一分词\n  text.replace(/\\r/g, '\\n').split(/(\\n|\\s)+/).forEach(function (section) {\n    var section = section.trim();\n    if (section.length < 1) return;\n    // ======================================\n    // 分词\n    var sret = me.tokenizer.split(section, me.modules.tokenizer);\n\n    // 优化\n    sret = me.optimizer.doOptimize(sret, me.modules.optimizer);\n\n    // ======================================\n    // 连接分词结果\n    if (sret.length > 0) ret = ret.concat(sret);\n  });\n\n  // 去除标点符号\n  if (options.stripPunctuation) {\n    ret = ret.filter(function (item) {\n      return item.p !== POSTAG.D_W;\n    });\n  }\n\n  // 转换同义词\n  function convertSynonym (list) {\n    var count = 0;\n    var TABLE = me.getDict('SYNONYM');\n    list = list.map(function (item) {\n      if (item.w in TABLE) {\n        count++;\n        return {w: TABLE[item.w], p: item.p};\n      } else {\n        return item;\n      }\n    });\n    return {count: count, list: list};\n  }\n  if (options.convertSynonym) {\n    do {\n      var result = convertSynonym(ret);\n      ret = result.list;\n    } while (result.count > 0);\n  }\n\n  // 去除停止符\n  if (options.stripStopword) {\n    var STOPWORD = me.getDict('STOPWORD');\n    ret = ret.filter(function (item) {\n      return !(item.w in STOPWORD);\n    });\n  }\n\n  // 仅返回单词内容\n  if (options.simple) {\n    ret = ret.map(function (item) {\n      return item.w;\n    });\n  }\n\n  return ret;\n};\n\n/**\n * 将单词数组连接成字符串\n *\n * @param {Array} words 单词数组\n * @return {String}\n */\nSegment.prototype.toString= function (words) {\n  return words.map(function (item) {\n    return item.w;\n  }).join('');\n};\n\n/**\n * 根据某个单词或词性来分割单词数组\n *\n * @param {Array} words 单词数组\n * @param {Number|String} s 用于分割的单词或词性\n * @return {Array}\n */\nSegment.prototype.split = function (words, s) {\n  var ret = [];\n  var lasti = 0;\n  var i = 0;\n  var f = typeof s === 'string' ? 'w' : 'p';\n\n  while (i < words.length) {\n    if (words[i][f] == s) {\n      if (lasti < i) ret.push(words.slice(lasti, i));\n      ret.push(words.slice(i, i + 1));\n      i++;\n      lasti = i;\n    } else {\n      i++;\n    }\n  }\n  if (lasti < words.length - 1) {\n    ret.push(words.slice(lasti, words.length));\n  }\n\n  return ret;\n};\n\n/**\n * 在单词数组中查找某一个单词或词性所在的位置\n *\n * @param {Array} words 单词数组\n * @param {Number|String} s 要查找的单词或词性\n * @param {Number} cur 开始位置\n * @return {Number} 找不到，返回-1\n */\nSegment.prototype.indexOf = function (words, s, cur) {\n  cur = isNaN(cur) ? 0 : cur;\n  var f = typeof s === 'string' ? 'w' : 'p';\n\n  while (cur < words.length) {\n    if (words[cur][f] == s) return cur;\n    cur++;\n  }\n\n  return -1;\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/POSTAG.js":"'use strict';\n\n/**\n * 单词类型\n */\n \nvar POSTAG = {}; \n\nPOSTAG.D_A  = 0x40000000; // 形容词 形语素\nPOSTAG.D_B  = 0x20000000; // 区别词 区别语素\nPOSTAG.D_C  = 0x10000000; // 连词 连语素\nPOSTAG.D_D  = 0x08000000; // 副词 副语素\nPOSTAG.D_E  = 0x04000000; // 叹词 叹语素\nPOSTAG.D_F  = 0x02000000; // 方位词 方位语素\nPOSTAG.D_I  = 0x01000000; // 成语\nPOSTAG.D_L  = 0x00800000; // 习语\nPOSTAG.A_M  = 0x00400000; // 数词 数语素\nPOSTAG.D_MQ = 0x00200000; // 数量词\nPOSTAG.D_N  = 0x00100000; // 名词 名语素\nPOSTAG.D_O  = 0x00080000; // 拟声词\nPOSTAG.D_P  = 0x00040000; // 介词\nPOSTAG.A_Q  = 0x00020000; // 量词 量语素\nPOSTAG.D_R  = 0x00010000; // 代词 代语素\nPOSTAG.D_S  = 0x00008000; // 处所词\nPOSTAG.D_T  = 0x00004000; // 时间词\nPOSTAG.D_U  = 0x00002000; // 助词 助语素\nPOSTAG.D_V  = 0x00001000; // 动词 动语素\nPOSTAG.D_W  = 0x00000800; // 标点符号\nPOSTAG.D_X  = 0x00000400; // 非语素字\nPOSTAG.D_Y  = 0x00000200; // 语气词 语气语素\nPOSTAG.D_Z  = 0x00000100; // 状态词\nPOSTAG.A_NR = 0x00000080; // 人名\nPOSTAG.A_NS = 0x00000040; // 地名\nPOSTAG.A_NT = 0x00000020; // 机构团体\nPOSTAG.A_NX = 0x00000010; // 外文字符\nPOSTAG.A_NZ = 0x00000008; // 其他专名\nPOSTAG.D_ZH = 0x00000004; // 前接成分\nPOSTAG.D_K  = 0x00000002; // 后接成分\nPOSTAG.UNK  = 0x00000000; // 未知词性\nPOSTAG.URL  = 0x00000001; // 网址、邮箱地址\n\nvar _POSTAG = {};\nfor (var i in POSTAG) _POSTAG[i] = POSTAG[i];\nfor (var i in POSTAG) POSTAG[i.toLowerCase()] = POSTAG[i];\n\n\n/** 中文说明 */\nPOSTAG.chsName = function (p) {\n  if (isNaN(p)) {\n    return CHSNAME[p] || CHSNAME.UNK;\n  } else {\n    var ret = [];\n    for (var i in _POSTAG) {\n      if ((p & _POSTAG[i]) > 0) {\n        ret.push(CHSNAME[i]);\n      }\n    }\n    if (ret.length < 1) {\n      return CHSNAME.UNK;\n    } else {\n      return ret.toString();\n    }\n  }\n};\n\nvar CHSNAME = POSTAG.CHSNAME = {};\nPOSTAG.CHSNAME.D_A  = '形容词 形语素';\nPOSTAG.CHSNAME.D_B  = '区别词 区别语素';\nPOSTAG.CHSNAME.D_C  = '连词 连语素';\nPOSTAG.CHSNAME.D_D  = '副词 副语素';\nPOSTAG.CHSNAME.D_E  = '叹词 叹语素';\nPOSTAG.CHSNAME.D_F  = '方位词 方位语素';\nPOSTAG.CHSNAME.D_I  = '成语';\nPOSTAG.CHSNAME.D_L  = '习语';\nPOSTAG.CHSNAME.A_M  = '数词 数语素';\nPOSTAG.CHSNAME.D_MQ = '数量词';\nPOSTAG.CHSNAME.D_N  = '名词 名语素';\nPOSTAG.CHSNAME.D_O  = '拟声词';\nPOSTAG.CHSNAME.D_P  = '介词';\nPOSTAG.CHSNAME.A_Q  = '量词 量语素';\nPOSTAG.CHSNAME.D_R  = '代词 代语素';\nPOSTAG.CHSNAME.D_S  = '处所词';\nPOSTAG.CHSNAME.D_T  = '时间词';\nPOSTAG.CHSNAME.D_U  = '助词 助语素';\nPOSTAG.CHSNAME.D_V  = '动词 动语素';\nPOSTAG.CHSNAME.D_W  = '标点符号';\nPOSTAG.CHSNAME.D_X  = '非语素字';\nPOSTAG.CHSNAME.D_Y  = '语气词 语气语素';\nPOSTAG.CHSNAME.D_Z  = '状态词';\nPOSTAG.CHSNAME.A_NR = '人名';\nPOSTAG.CHSNAME.A_NS = '地名';\nPOSTAG.CHSNAME.A_NT = '机构团体';\nPOSTAG.CHSNAME.A_NX = '外文字符';\nPOSTAG.CHSNAME.A_NZ = '其他专名';\nPOSTAG.CHSNAME.D_ZH = '前接成分';\nPOSTAG.CHSNAME.D_K  = '后接成分';\nPOSTAG.CHSNAME.UNK  = '未知';\nPOSTAG.CHSNAME.URL  = '网址 邮箱地址';\n\nfor (var i in CHSNAME) {\n  CHSNAME[i.toLowerCase()] = CHSNAME[i];\n}\n\nmodule.exports = POSTAG;\n\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/Tokenizer.js":"'use strict';\n\n/**\n * 分词模块管理器\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \n/**\n * 分词模块管理器\n*\n* @param {Segment} 分词接口\n*/ \nvar Tokenizer = module.exports = function (segment) {\n  this.segment = segment;\n};\n\n/**\n * 对一段文本进行分词\n *\n * @param {string} text 文本\n * @param {array} modules 分词模块数组\n * @return {array}\n */\nTokenizer.prototype.split = function (text, modules) {\n  if (modules.length < 1) {\n    throw Error('No tokenizer module!');\n  } else {\n    // 按顺序分别调用各个module来进行分词 ： 各个module仅对没有识别类型的单词进行分词\n    var ret = [{w: text}];\n    modules.forEach(function (module) {\n      ret = module.split(ret);\n    });\n    return ret;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/Optimizer.js":"'use strict';\n\n/**\n * 优化模块管理器\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \n/**\n * 优化模块管理器\n *\n * @param {Segment} 分词接口\n */ \nvar Optimizer = module.exports = function (segment) {\n  this.segment = segment;\n};\n\n/**\n * 对一段文本进行分词\n *\n * @param {array} words 单词数组\n * @param {array} modules 分词模块数组\n * @return {array}\n */\nOptimizer.prototype.doOptimize = function (words, modules) {\n  // 按顺序分别调用各个module来进行分词 ： 各个module仅对没有识别类型的单词进行分词\n  modules.forEach(function (module) {\n    words = module.doOptimize(words);\n  });\n  return words;\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/ChsNameOptimizer.js":"'use strict';\n\n/**\n * 人名优化模块\n *\n * @author 老雷<leizongmin@gmail.com>\n * @version 0.1\n */\n \nvar FAMILY_NAME_1 = require('./CHS_NAMES').FAMILY_NAME_1; \nvar FAMILY_NAME_2 = require('./CHS_NAMES').FAMILY_NAME_2; \nvar SINGLE_NAME = require('./CHS_NAMES').SINGLE_NAME;\nvar DOUBLE_NAME_1 = require('./CHS_NAMES').DOUBLE_NAME_1;\nvar DOUBLE_NAME_2 = require('./CHS_NAMES').DOUBLE_NAME_2;\nvar debug = console.log; \n\n/** 模块类型 */\nexports.type = 'optimizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对可能是人名的单词进行优化\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.doOptimize = function (words) {\n  //debug(words);\n  var POSTAG = exports.segment.POSTAG;\n  var i = 0;\n  \n  /* 第一遍扫描 */\n  while (i < words.length) {\n    var word = words[i];\n    var nextword = words[i + 1];\n    if (nextword) {\n      //debug(nextword);\n      // 如果为  \"小|老\" + 姓\n      if (nextword && (word.w == '小' || word.w == '老') &&\n      (nextword.w in FAMILY_NAME_1 || nextword.w in FAMILY_NAME_2)) {\n        words.splice(i, 2, {\n          w:  word.w + nextword.w,\n          p:  POSTAG.A_NR\n        }); \n        i++;\n        continue;\n      }\n      \n      // 如果是 姓 + 名（2字以内）\n      if ((word.w in FAMILY_NAME_1 || word.w in FAMILY_NAME_2) &&\n      ((nextword.p & POSTAG.A_NR) > 0 && nextword.w.length <= 2)) {\n        words.splice(i, 2, {\n          w:  word.w + nextword.w,\n          p:  POSTAG.A_NR\n        }); \n        i++;\n        continue;\n      }\n      \n      // 如果相邻两个均为单字且至少有一个字是未识别的，则尝试判断其是否为人名\n      if (!word.p || !nextword.p) {\n        if ((word.w in SINGLE_NAME && word.w == nextword.w) ||\n        (word.w in DOUBLE_NAME_1 && nextword.w in DOUBLE_NAME_2)) {\n          words.splice(i, 2, {\n            w:  word.w + nextword.w,\n            p:  POSTAG.A_NR\n          });\n          // 如果上一个单词可能是一个姓，则合并\n          var preword = words[i - 1];\n          if (preword &&\n          (preword.w in FAMILY_NAME_1 || preword.w in FAMILY_NAME_2)) {\n            words.splice(i - 1, 2, {\n              w:  preword.w + word.w + nextword.w,\n              p:  POSTAG.A_NR\n            });\n          } else {\n            i++;\n          }\n          continue;\n        }\n      }\n\n      // 如果为 无歧义的姓 + 名（2字以内） 且其中一个未未识别词\n      if ((word.w in FAMILY_NAME_1 || word.w in FAMILY_NAME_2) &&\n          (!word.p || !nextword.p)) {\n        //debug(word, nextword);\n        words.splice(i, 2, {\n          w:  word.w + nextword.w,\n          p:  POSTAG.A_NR\n        });\n      }\n    }\n    \n    // 移到下一个单词\n    i++;\n  }\n  \n  /* 第二遍扫描 */\n  i = 0;\n  while (i < words.length) {\n    var word = words[i];\n    var nextword = words[i + 1];\n    if (nextword) {\n      // 如果为 姓 + 单字名\n      if ((word.w in FAMILY_NAME_1 || word.w in FAMILY_NAME_2) &&\n      nextword.w in SINGLE_NAME) {\n        words.splice(i, 2, {\n          w:  word.w + nextword.w,\n          p:  POSTAG.A_NR\n        });\n        i++;\n        continue;\n      }\n    }\n    \n    // 移到下一个单词\n    i++;\n  }\n  \n  return words;\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/CHS_NAMES.js":"'use strict';\n\n/**\n * 中文姓\n */\n \n// 单姓\nvar FAMILY_NAME_1 = [\n  //有明显歧义的姓氏\n  '王','张','黄','周','徐','胡','高','林','马','于','程','傅','曾','叶','余',\n  '夏','钟','田','任','方','石','熊','白','毛','江','史','候','龙','万','段',\n  '雷','钱','汤','易','常','武','赖','文', '查',\n  //没有明显歧义的姓氏\n  '赵', '肖', '孙', '李', '吴', '郑', '冯', '陈', '褚', '卫', '蒋', '沈', \n  '韩', '杨', '朱', '秦', '尤', '许', '何', '吕', '施', '桓', '孔', '曹',\n  '严', '华', '金', '魏', '陶', '姜', '戚', '谢', '邹', '喻', '柏', '窦',\n  '苏', '潘', '葛', '奚', '范', '彭', '鲁', '韦', '昌', '俞', '袁', '酆', \n  '鲍', '唐', '费', '廉', '岑', '薛', '贺', '倪', '滕', '殷', '罗', '毕',\n  '郝', '邬', '卞', '康', '卜', '顾', '孟', '穆', '萧', '尹', '姚', '邵',\n  '湛', '汪', '祁', '禹', '狄', '贝', '臧', '伏', '戴', '宋', '茅', '庞',\n  '纪', '舒', '屈', '祝', '董', '梁', '杜', '阮', '闵', '贾', '娄', '颜',\n  '郭', '邱', '骆', '蔡', '樊', '凌', '霍', '虞', '柯', '昝', '卢', '柯',\n  '缪', '宗', '丁', '贲', '邓', '郁', '杭', '洪', '崔', '龚', '嵇', '邢',\n  '滑', '裴', '陆', '荣', '荀', '惠', '甄', '芮', '羿', '储', '靳', '汲', \n  '邴', '糜', '隗', '侯', '宓', '蓬', '郗', '仲', '栾', '钭', '历', '戎',\n  '刘', '詹', '幸', '韶', '郜', '黎', '蓟', '溥', '蒲', '邰', '鄂', '咸',\n  '卓', '蔺', '屠', '乔', '郁', '胥', '苍', '莘', '翟', '谭', '贡', '劳',\n  '冉', '郦', '雍', '璩', '桑', '桂', '濮', '扈', '冀', '浦', '庄', '晏',\n  '瞿', '阎', '慕', '茹', '习', '宦', '艾', '容', '慎', '戈', '廖', '庾',\n  '衡', '耿', '弘', '匡', '阙', '殳', '沃', '蔚', '夔', '隆', '巩', '聂',\n  '晁', '敖', '融', '訾', '辛', '阚', '毋', '乜', '鞠', '丰', '蒯', '荆',\n  '竺', '盍', '单', '欧'];\n// 复姓\nvar FAMILY_NAME_2 = [\n  '司马', '上官', '欧阳','夏侯', '诸葛', '闻人','东方', '赫连', '皇甫',\n  '尉迟', '公羊', '澹台','公冶', '宗政', '濮阳','淳于', '单于', '太叔',\n  '申屠', '公孙', '仲孙','轩辕', '令狐', '徐离','宇文', '长孙', '慕容',\n  '司徒', '司空', '万俟'];\n  \n// 双字姓名第一个字\nvar DOUBLE_NAME_1 = [\n  '阿','建','小','晓','文','志','国','玉','丽','永','海','春','金','明',\n  '新','德','秀','红','亚','伟','雪','俊','桂','爱','美','世','正','庆',\n  '学','家','立','淑','振','云','华','光','惠','兴','天','长','艳','慧',\n  '利','宏','佳','瑞','凤','荣','秋','继','嘉','卫','燕','思','维','少',\n  '福','忠','宝','子','成','月','洪','东','一','泽','林','大','素','旭',\n  '宇','智','锦','冬','玲','雅','伯','翠','传','启','剑','安','树','良',\n  '中','梦','广','昌','元','万','清','静','友','宗','兆','丹','克','彩',\n  '绍','喜','远','朝','敏','培','胜','祖','先','菊','士','向','有','连',\n  '军','健','巧','耀','莉','英','方','和','仁','孝','梅','汉','兰','松',\n  '水','江','益','开','景','运','贵','祥','青','芳','碧','婷','龙','鹏',\n  '自','顺','双','书','生','义','跃','银','佩','雨','保','贤','仲','鸿',\n  '浩','加','定','炳','飞','锡','柏','发','超','道','怀','进','其','富',\n  '平','全','阳','吉','茂','彦','诗','洁','润','承','治','焕','如','君',\n  '增','善','希','根','应','勇','宜','守','会','凯','育','湘','凌','本',\n  '敬','博','延','乐','三','二', '四', '五', '六', '七','八', '九', '十'];\n  \n// 双字姓名第二个字 \nvar DOUBLE_NAME_2 = [\n  '华','平','明','英','军','林','萍','芳','玲','红','生','霞','梅','文',\n  '荣','珍','兰','娟','峰','琴','云','辉','东','龙','敏','伟','强','丽',\n  '春','杰','燕','民','君','波','国','芬','清','祥','斌','婷','飞','良',\n  '忠','新','凤','锋','成','勇','刚','玉','元','宇','海','兵','安','庆',\n  '涛','鹏','亮','青','阳','艳','松','江','莲','娜','兴','光','德','武',\n  '香','俊','秀','慧','雄','才','宏','群','琼','胜','超','彬','莉','中',\n  '山','富','花','宁','利','贵','福','发','义','蓉','喜','娥','昌','仁',\n  '志','全','宝','权','美','琳','建','金','贤','星','丹','根','和','珠',\n  '康','菊','琪','坤','泉','秋','静','佳','顺','源','珊','达','欣','如',\n  '莹','章','浩','勤','芹','容','友','芝','豪','洁','鑫','惠','洪','旺',\n  '虎','远','妮','森','妹','南','雯','奇','健','卿','虹','娇','媛','怡',\n  '铭','川','进','博','智','来','琦','学','聪','洋','乐','年','翔','然',\n  '栋','凯','颖','鸣','丰','瑞','奎','立','堂','威','雪','鸿','晶','桂',\n  '凡','娣','先','洲','毅','雅','月','旭','田','晖','方','恒','亚','泽',\n  '风','银','高','贞','九','薇'];\n  \n// 单字姓名\nvar SINGLE_NAME = [\n  '家','民','敏','伟','勇','军','斌','静','丽','涛','芳','杰','萍','强',\n  '俊','明','燕','磊','玲','华','平','鹏','健','波','红','丹','辉','超',\n  '艳','莉','刚','娟','峰','婷','亮','洁','颖','琳','英','慧','飞','霞',\n  '浩','凯','宇','毅','林','佳','云','莹','娜','晶','洋','文','鑫','欣',\n  '琴','宁','琼','兵','青','琦','翔','彬','锋','阳','璐','旭','蕾','剑',\n  '虹','蓉','建','倩','梅','宏','威','博','君','力','龙','晨','薇','雪',\n  '琪','欢','荣','江','炜','成','庆','冰','东','帆','雷','楠','锐','进',\n  '海','凡','巍','维','迪','媛','玮','杨','群','瑛','悦','春','瑶','婧',\n  '兰','茜','松','爽','立','瑜','睿','晖','聪','帅','瑾','骏','雯','晓',\n  '昊','勤','新','瑞','岩','星','忠','志','怡','坤','康','航','利','畅',\n  '坚','雄','智','萌','哲','岚','洪','捷','珊','恒','靖','清','扬','昕',\n  '乐','武','玉','诚','菲','锦','凤','珍','晔','妍','璇','胜','菁','科',\n  '芬','露','越','彤','曦','义','良','鸣','芸','方','月','铭','光','震',\n  '冬','源','政','虎','莎','彪','蓓','钢','凌','奇','卫','彦','烨','可',\n  '黎','川','淼','惠','祥','然','三','二', '一', '四', '五', '六', '七',\n  '八', '九', '十'];\n  \n\n\nfunction p (a, f, n) {\n  exports[f] = {};\n  a.forEach(function (v) {\n    exports[f][v] = n;\n  });\n}\n\np(FAMILY_NAME_1, 'FAMILY_NAME_1', 1);\np(FAMILY_NAME_2, 'FAMILY_NAME_2', 2);\np(DOUBLE_NAME_1, 'DOUBLE_NAME_1', 1);\np(DOUBLE_NAME_2, 'DOUBLE_NAME_2', 2);\np(SINGLE_NAME, 'SINGLE_NAME', 1);\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/ChsNameTokenizer.js":"'use strict';\n\n/**\n * 中文人名识别模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \nvar FAMILY_NAME_1 = require('./CHS_NAMES').FAMILY_NAME_1; \nvar FAMILY_NAME_2 = require('./CHS_NAMES').FAMILY_NAME_2; \nvar SINGLE_NAME = require('./CHS_NAMES').SINGLE_NAME;\nvar DOUBLE_NAME_1 = require('./CHS_NAMES').DOUBLE_NAME_1;\nvar DOUBLE_NAME_2 = require('./CHS_NAMES').DOUBLE_NAME_2;\nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'tokenizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.split = function (words) {\n  var POSTAG = exports.segment.POSTAG;\n  var ret = [];\n  for (var i = 0, word; word = words[i]; i++) {\n    if (word.p > 0) {\n      ret.push(word);\n      continue;\n    }\n    // 仅对未识别的词进行匹配\n    var nameinfo = matchName(word.w);\n    if (nameinfo.length < 1) {\n      ret.push(word);\n      continue;\n    }\n    // 分离出人名\n    var lastc = 0;\n    for (var ui = 0, url; url = nameinfo[ui]; ui++) {\n      if (url.c > lastc) {\n        ret.push({w: word.w.substr(lastc, url.c - lastc)});\n      }\n      ret.push({w: url.w, p: POSTAG.A_NR});\n      lastc = url.c + url.w.length;\n    }\n    var lastn = nameinfo[nameinfo.length - 1];\n    if (lastn.c + lastn.w.length < word.w.length) {\n      ret.push({w: word.w.substr(lastn.c + lastn.w.length)});\n    }\n  }\n  return ret;\n};\n\n\n// ======================================================================\n/**\n * 匹配包含的人名，并返回相关信息\n *\n * @param {string} text 文本\n * @param {int} cur 开始位置\n * @return {array}  返回格式   {w: '人名', c: 开始位置}\n */\nvar matchName = function (text, cur) {\n  if (isNaN(cur)) cur = 0;\n  var ret = [];\n  while (cur < text.length) {//debug('cur=' + cur + ', ' + text.charAt(cur));\n    var name = false;\n    // 复姓\n    var f2 = text.substr(cur, 2);\n    if (f2 in FAMILY_NAME_2) {\n      var n1 = text.charAt(cur + 2);\n      var n2 = text.charAt(cur + 3);\n      if (n1 in DOUBLE_NAME_1 && n2 in DOUBLE_NAME_2) {\n        name = f2 + n1 + n2;\n      } else if (n1 in SINGLE_NAME) {\n        name = f2 + n1 + (n1 == n2 ? n2 : '');\n      }\n    }\n    // 单姓\n    var f1 = text.charAt(cur);\n    if (name === false && f1 in FAMILY_NAME_1) {\n      var n1 = text.charAt(cur + 1);\n      var n2 = text.charAt(cur + 2);\n      if (n1 in DOUBLE_NAME_1 && n2 in DOUBLE_NAME_2) {\n        name = f1 + n1 + n2;\n      } else if (n1 in SINGLE_NAME) {\n        name = f1 + n1 + (n1 == n2 ? n2 : '');\n      }\n    }\n    // 检查是否匹配成功\n    if (name === false) {\n      cur++;\n    } else {\n      ret.push({w: name, c: cur});\n      cur += name.length;\n    }\n  }\n  return ret;\n};\n// debug(matchName('刘德华和李娜娜、司马光、上官飞飞'));\n// debug(matchName('李克'));\n\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/DatetimeOptimizer.js":"'use strict';\n\n/**\n * 日期时间优化模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'optimizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 日期时间优化\n *\n * @param {array} words 单词数组\n * @param {bool} is_not_first 是否为管理器调用的\n * @return {array}\n */\nexports.doOptimize = function (words, is_not_first) {\n  if (typeof is_not_first == 'undefined') {\n    is_not_first = false;\n  }\n  // 合并相邻的能组成一个单词的两个词\n  var TABLE = exports.segment.getDict('TABLE');\n  var POSTAG = exports.segment.POSTAG;\n  \n  var i = 0;\n  var ie = words.length - 1;\n  while (i < ie) {\n    var w1 = words[i];\n    var w2 = words[i + 1];\n    //debug(w1.w + ', ' + w2.w);\n    \n    if ((w1.p & POSTAG.A_M) > 0) {\n      // =========================================\n      // 日期时间组合   数字 + 日期单位，如 “2005年\"\n      if (w2.w in DATETIME) {\n        var nw = w1.w + w2.w;\n        var len = 2;\n        // 继续搜索后面连续的日期时间描述，必须符合  数字 + 日期单位 \n        while (true) {\n          var w1 = words[i + len];\n          var w2 = words[i + len + 1];\n          if (w1 && w2 && (w1.p & POSTAG.A_M) > 0 && w2.w in DATETIME) {\n            len += 2;\n            nw += w1.w + w2.w;\n          } else {\n            break;\n          }\n        }\n        words.splice(i, len, {\n          w:  nw,\n          p:  POSTAG.D_T\n        });\n        ie -= len - 1;\n        continue;\n      }\n      // =========================================\n    }\n    \n    // 移到下一个词\n    i++;\n  }\n  \n  return words;\n};\n\n// ====================================================\n// 日期时间常见组合\nvar _DATETIME = [\n  '世纪', '年', '年份', '年度', '月', '月份', '月度', '日', '号',\n  '时', '点', '点钟', '分', '分钟', '秒', '毫秒'\n];\nvar DATETIME = {};\nfor (var i in _DATETIME) DATETIME[_DATETIME[i]] = _DATETIME[i].length;\n// ====================================================\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/DictOptimizer.js":"'use strict';\n\n/**\n * 词典优化模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'optimizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 词典优化\n *\n * @param {array} words 单词数组\n * @param {bool} is_not_first 是否为管理器调用的\n * @return {array}\n */\nexports.doOptimize = function (words, is_not_first) {\n  //debug(words);\n  if (typeof is_not_first == 'undefined') {\n    is_not_first = false;\n  }\n  // 合并相邻的能组成一个单词的两个词\n  var TABLE = exports.segment.getDict('TABLE');\n  var POSTAG = exports.segment.POSTAG;\n  \n  var i = 0;\n  var ie = words.length - 1;\n  while (i < ie) {\n    var w1 = words[i];\n    var w2 = words[i + 1];\n    //debug(w1.w + ', ' + w2.w);\n    \n    // ==========================================\n    // 能组成一个新词的(词性必须相同)\n    var nw = w1.w + w2.w;\n    if (w1.p == w2.p && nw in TABLE) {\n      words.splice(i, 2, {\n        w:  nw,\n        p:  TABLE[nw].p\n      });\n      ie--;\n      continue;\n    }\n    \n    // 形容词 + 助词 = 形容词，如： 不同 + 的 = 不同的\n    if ((w1.p & POSTAG.D_A) > 0 && (w2.p & POSTAG.D_U)) {\n      words.splice(i, 2, {\n        w:  nw,\n        p:  POSTAG.D_A\n      });\n      ie--;\n      continue;\n    }\n\n    // ============================================\n    // 数词组合\n    if ((w1.p & POSTAG.A_M) > 0) {\n      //debug(w2.w + ' ' + (w2.p & POSTAG.A_M));\n      // 百分比数字 如 10%，或者下一个词也是数词，则合并\n      if ((w2.p & POSTAG.A_M) > 0 || w2.w == '%') {\n        words.splice(i, 2, {\n          w:  w1.w + w2.w,\n          p:  POSTAG.A_M\n        });\n        ie--;\n        continue;\n      }\n      // 数词 + 量词，合并。如： 100个\n      if ((w2.p & POSTAG.A_Q) > 0) {\n        words.splice(i, 2, {\n          w:  w1.w + w2.w,\n          p:  POSTAG.D_MQ // 数量词\n        });\n        ie--;\n        continue;\n      }\n      // 带小数点的数字 ，如 “3 . 14”，或者 “十五点三”\n      // 数词 + \"分之\" + 数词，如“五十分之一”\n      var w3 = words[i + 2];\n      if (w3 && (w3.p & POSTAG.A_M) > 0 &&\n         (w2.w == '.' || w2.w == '点' || w2.w == '分之')) {\n        words.splice(i, 3, {\n          w:  w1.w + w2.w + w3.w,\n          p:  POSTAG.A_M\n        });\n        ie -= 2;\n        continue;\n      }\n    }\n\n    // 修正 “十五点五八”问题\n    if ((w1.p & POSTAG.D_MQ) > 0 && w1.w.substr(-1) === '点' && w2.p & POSTAG.A_M) {\n      //debug(w1, w2);\n      var i2 = 2;\n      var w4w = '';\n      for (var j = i + i2; j < ie; j++) {\n        var w3 = words[j];\n        if ((w3.p & POSTAG.A_M) > 0) {\n          w4w += w3.w;\n          i2++;\n        } else {\n          break;\n        }\n      }\n      words.splice(i, i2, {\n        w:  w1.w + w2.w + w4w,\n        p:  POSTAG.D_MQ // 数量词\n      });\n      ie -= i2 - 1;\n      continue;\n    }\n    \n    // 移到下一个词\n    i++;\n  }\n  \n  // 针对组合数字后无法识别新组合的数字问题，需要重新扫描一次\n  return is_not_first === true ? words : exports.doOptimize(words, true);\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/DictTokenizer.js":"'use strict';\n\n/**\n * 字典识别模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \nvar FAMILY_NAME_1 = require('./CHS_NAMES').FAMILY_NAME_1; \nvar FAMILY_NAME_2 = require('./CHS_NAMES').FAMILY_NAME_2; \nvar SINGLE_NAME = require('./CHS_NAMES').SINGLE_NAME;\nvar DOUBLE_NAME_1 = require('./CHS_NAMES').DOUBLE_NAME_1;\nvar DOUBLE_NAME_2 = require('./CHS_NAMES').DOUBLE_NAME_2;\nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'tokenizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.split = function (words) {\n  // debug(words);\n  var POSTAG = exports.segment.POSTAG;\n  var TABLE = exports.segment.getDict('TABLE');\n  var ret = [];\n  for (var i = 0, word; word = words[i]; i++) {\n    if (word.p > 0) {\n      ret.push(word);\n      continue;\n    }\n    // 仅对未识别的词进行匹配\n    var wordinfo = matchWord(word.w, 0, words[i - 1]);\n    if (wordinfo.length < 1) {\n      ret.push(word);\n      continue;\n    }\n    // 分离出已识别的单词\n    var lastc = 0;\n    for (var ui = 0, bw; bw = wordinfo[ui]; ui++) {\n      if (bw.c > lastc) {\n        ret.push({w: word.w.substr(lastc, bw.c - lastc)});\n      }\n      ret.push({w: bw.w, p: TABLE[bw.w].p});\n      lastc = bw.c + bw.w.length;\n    }\n    var lastword = wordinfo[wordinfo.length - 1];\n    if (lastword.c + lastword.w.length < word.w.length) {\n      ret.push({w: word.w.substr(lastword.c + lastword.w.length)});\n    }\n  }\n  return ret;\n};\n\n// =================================================================\n// 日期时间常见组合\nvar _DATETIME = [\n  '世纪', '年', '年份', '年度', '月', '月份', '月度', '日', '号',\n  '时', '点', '点钟', '分', '分钟', '秒', '毫秒'\n];\nvar DATETIME = {};\nfor (var i in _DATETIME) DATETIME[_DATETIME[i]] = _DATETIME[i].length;\n//debug(DATETIME);\n// =================================================================\n/**\n * 匹配单词，返回相关信息\n *\n * @param {string} text 文本\n * @param {int} cur 开始位置\n * @param {object} preword 上一个单词\n * @return {array}  返回格式   {w: '单词', c: 开始位置}\n */\nvar matchWord = function (text, cur, preword) {\n  if (isNaN(cur)) cur = 0;\n  var ret = [];\n  var s = false;\n  var TABLE = exports.segment.getDict('TABLE2');\n  // 匹配可能出现的单词\n  while (cur < text.length) {\n    for (var i in TABLE) {\n      var w = text.substr(cur, i);\n      if (w in TABLE[i]) {\n        ret.push({w: w, c: cur, f: TABLE[i][w].f});\n      }\n    }\n    cur++;\n  }\n  \n  return filterWord(ret, preword, text);\n};\n//debug(matchWord('长春市长春药店'));\n\n/**\n * 选择最有可能匹配的单词\n *\n * @param {array} words 单词信息数组\n * @param {object} preword 上一个单词\n * @param {string} text 本节要分词的文本\n * @return {array}\n */\nvar filterWord = function (words, preword, text) {\n  var POSTAG = exports.segment.POSTAG;\n  var TABLE = exports.segment.getDict('TABLE');\n  var ret = [];\n  \n  // 将单词按位置分组\n  var wordpos = getPosInfo(words, text);\n  //debug(wordpos);\n  \n  // 使用类似于MMSG的分词算法\n  // 找出所有分词可能，主要根据一下几项来评价：\n  // x、词数量最少；\n  // a、词平均频率最大；\n  // b、每个词长度标准差最小；\n  // c、未识别词最少；\n  // d、符合语法结构项：如两个连续的动词减分，数词后面跟量词加分；\n  // 取以上几项综合排名最最好的\n  var chunks = getChunks(wordpos, 0, text);\n  //debug(chunks);\n  var assess = [];  // 评价表\n  \n  // 对各个分支就行评估\n  for (var i = 0, chunk; chunk = chunks[i]; i++) {\n    assess[i] = {x: chunk.length, a:0, b:0, c:0, d:0}\n    // 词平均长度\n    var sp = text.length / chunk.length;\n    // 句子经常包含的语法结构\n    var has_D_V = false;  // 是否包含动词\n    \n    // 遍历各个词\n    if (preword) {\n      var prew = {w: preword.w, p: preword.p, f: preword.f}\n    } else {\n      prew = false;\n    }\n    for (var j = 0, w; w = chunk[j]; j++) {\n      if (w.w in TABLE) {\n        w.p = TABLE[w.w].p;\n        assess[i].a += w.f;   // 总词频\n        \n        // ================ 检查语法结构 ===================\n        if (prew) {\n          // 如果上一个词是数词且当前词是量词（单位），则加分\n          if ((prew.p & POSTAG.A_M) > 0 &&\n          (((TABLE[w.w].p & POSTAG.A_Q) > 0) || w.w in DATETIME)) {\n            assess[i].d++;\n          }\n          // 如果当前词是动词\n          if ((w.p & POSTAG.D_V) > 0) {\n            has_D_V = true;\n            // 如果是连续的两个动词，则减分\n            //if ((prew.p & POSTAG.D_V) > 0)\n              //assess[i].d--;\n            // 如果是 形容词 + 动词，则加分\n            if ((prew.p & POSTAG.D_A) > 0) {\n              assess[i].d++;\n            }\n          }\n          // 如果是地区名、机构名或形容词，后面跟地区、机构、代词、名词等，则加分\n          if (((prew.p & POSTAG.A_NS) > 0 || (prew.p & POSTAG.A_NT) || (prew.p & POSTAG.D_A) > 0) &&\n          ((w.p & POSTAG.D_N) > 0 || (w.p & POSTAG.A_NR) > 0 ||\n          (w.p & POSTAG.A_NS) > 0 || (w.p & POSTAG.A_NZ) > 0 ||\n          (w.p & POSTAG.A_NT) > 0\n          )) {\n            assess[i].d++;\n          }\n          // 如果是 方位词 + 数量词，则加分\n          if ((prew.p & POSTAG.D_F) > 0 && \n            ((w.p & POSTAG.A_M > 0) || w.p & POSTAG.D_MQ > 0)) {\n            //debug(prew, w);\n            assess[i].d++;\n          }\n          // 如果是 姓 + 名词，则加分\n          if ((prew.w in FAMILY_NAME_1 || prew.w in FAMILY_NAME_2) &&\n            ((w.p & POSTAG.D_N) > 0 || (w.p & POSTAG.A_NZ) > 0)) {\n            //debug(prew, w);\n            assess[i].d++;\n          }\n\n          // 探测下一个词\n          var nextw = chunk[j + 1];\n          if (nextw) {\n            if (nextw.w in TABLE) {\n              nextw.p = TABLE[nextw.w].p;\n            }\n            // 如果是连词，前后两个词词性相同则加分\n            if ((w.p & POSTAG.D_C) > 0 && prew.p == nextw.p) {\n              assess[i].d++;\n            }\n            // 如果当前是“的”+ 名词，则加分\n            if ((w.w == '的' || w.w == '之') && (\n            (nextw.p & POSTAG.D_N) > 0 || (nextw.p & POSTAG.A_NR) > 0 ||\n            (nextw.p & POSTAG.A_NS) > 0 || (nextw.p & POSTAG.A_NZ) > 0 ||\n            (nextw.p & POSTAG.A_NT) > 0\n            )) {\n              assess[i].d += 1.5;\n            }\n          }\n        }\n        // ===========================================\n      } else {\n        assess[i].c++;      // 未识别的词数量\n      }\n      // 标准差\n      assess[i].b += Math.pow(sp - w.w.length, 2);\n      prew = chunk[j];\n    }\n    // 如果句子中包含了至少一个动词\n    if (has_D_V === false)  assess[i].d -= 0.5;\n    \n    assess[i].a = assess[i].a / chunk.length;\n    assess[i].b = assess[i].b / chunk.length;\n  }\n  \n  // 计算排名\n  var top = getTops(assess);\n  var currchunk = chunks[top];\n  \n  // 剔除不能识别的词\n  for (var i = 0, word; word = currchunk[i]; i++) {\n    if (!(word.w in TABLE)) {\n      currchunk.splice(i--, 1);\n    }\n  }\n  ret = currchunk;\n  \n  //debug(ret);\n  return ret;\n};\n\n/**\n * 将单词按照位置排列\n *\n * @param {array} words\n * @param {string} text\n * @return {object}\n */\nvar getPosInfo = function (words, text) {\n  var wordpos = {};\n  // 将单词按位置分组\n  for (var i = 0, word; word = words[i]; i++) {\n    if (!wordpos[word.c]) {\n      wordpos[word.c] = [];\n    }\n    wordpos[word.c].push(word);\n  }\n  // 按单字分割文本，填补空缺的位置\n  for (var i = 0; i < text.length; i++) {\n    if (!wordpos[i]) {\n      wordpos[i] = [{w: text.charAt(i), c: i, f: 0}];\n    }\n  }\n      \n  return wordpos;\n};\n\n/**\n * 取所有分支\n *\n * @param {object} wordpos\n * @param {int} pos 当前位置\n * @param {string} text 本节要分词的文本\n * @return {array}\n */\nvar getChunks = function (wordpos, pos, text) {\n  var words = wordpos[pos] || [];\n  // debug('getChunks: ');\n  // debug(words);\n  // throw new Error();\n  var ret = [];\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    //debug(word);\n    var nextcur = word.c + word.w.length;\n    if (!wordpos[nextcur]) {\n      ret.push([word]);\n    } else {\n      var chunks = getChunks(wordpos, nextcur);\n      for (var j = 0; j < chunks.length; j++) {\n        ret.push([word].concat(chunks[j]));\n      }\n    }\n  }\n  return ret;\n};\n\n/**\n * 评价排名\n *\n * @param {object} assess\n * @return {object}\n */\nvar getTops = function (assess) {\n  //debug(assess);\n  // 取各项最大值\n  var top = {x: assess[0].x, a: assess[0].a, b: assess[0].b, c: assess[0].c, d: assess[0].d}\n  for (var i = 1, ass; ass = assess[i]; i++) {\n    if (ass.a > top.a) top.a = ass.a;  // 取最大平均词频\n    if (ass.b < top.b) top.b = ass.b;  // 取最小标准差\n    if (ass.c > top.c) top.c = ass.c;  // 取最大未识别词\n    if (ass.d < top.d) top.d = ass.d;  // 取最小语法分数\n    if (ass.x > top.x) top.x = ass.x;  // 取最大单词数量\n  }\n  //debug(top);\n  \n  // 评估排名\n  var tops = [];\n  for (var i = 0, ass; ass = assess[i]; i++) {\n    tops[i] = 0;\n    // 词数量，越小越好\n    tops[i] += (top.x - ass.x) * 1.5;\n    // 词总频率，越大越好\n    if (ass.a >= top.a) tops[i] += 1;\n    // 词标准差，越小越好\n    if (ass.b <= top.b) tops[i] += 1;\n    // 未识别词，越小越好\n    tops[i] += (top.c - ass.c);//debug(tops[i]);\n    // 符合语法结构程度，越大越好\n    tops[i] += (ass.d < 0 ? top.d + ass.d : ass.d - top.d) * 1;\n    //debug(tops[i]);debug('---');\n  }\n  //debug(tops.join('  '));\n  \n  // 取分数最高的\n  var curri = 0;\n  var maxs = tops[0];\n  for (var i in tops) {\n    var s = tops[i];\n    if (s > maxs) {\n      curri = i;\n      maxs = s;\n    } else if (s == maxs) {\n      // 如果分数相同，则根据词长度、未识别词个数和平均频率来选择\n      var a = 0;\n      var b = 0;\n      if (assess[i].c < assess[curri].c) a++; else b++;\n      if (assess[i].a > assess[curri].a) a++; else b++;\n      if (assess[i].x < assess[curri].x) a++; else b++;\n      if (a > b) {\n        curri = i;\n        maxs = s;\n      }\n    }\n    // debug('i=' + i + ', s=' + s + ', maxs=' + maxs);\n  }\n  //debug('max: i=' + curri + ', s=' + tops[curri]);\n  return curri;\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/EmailOptimizer.js":"'use strict';\n\n/**\n * 邮箱地址识别优化模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nvar debug = console.log;\n\n/** 模块类型 */\nexports.type = 'optimizer';\n\n/**\n * 模块初始化\n *\n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对可能是邮箱地址的单词进行优化\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.doOptimize = function (words) {\n  var POSTAG = exports.segment.POSTAG;\n  //debug(words);\n\n  var i = 0;\n  var ie = words.length - 1;\n  var addr_start = false;\n  var has_at = false;\n  while (i < ie) {\n    var word = words[i];\n    var is_ascii = ((word.p == POSTAG.A_NX) ||\n            (word.p == POSTAG.A_M && word.w.charCodeAt(0) < 128))\n            ? true : false;\n\n    // 如果是外文字符或者数字，符合电子邮件地址开头的条件\n    if (addr_start === false && is_ascii) {\n      addr_start = i;\n      i++;\n      continue;\n    } else {\n      // 如果遇到@符号，符合第二个条件\n      if (has_at === false && word.w == '@') {\n        has_at = true;\n        i++;\n        continue;\n      }\n      // 如果已经遇到过@符号，且出现了其他字符，则截取邮箱地址\n      if (has_at !== false && words[i - 1].w != '@' && is_ascii === false && !(word.w in EMAILCHAR)) {\n        var mailws = words.slice(addr_start, i);\n        //debug(toEmailAddress(mailws));\n        words.splice(addr_start, mailws.length, {\n          w:  toEmailAddress(mailws),\n          p:  POSTAG.URL\n        });\n        i = addr_start + 1;\n        ie -= mailws.length - 1;\n        addr_start = false;\n        has_at = false;\n        continue;\n      }\n      // 如果已经开头\n      if (addr_start !== false && (is_ascii || word.w in EMAILCHAR)) {\n        i++;\n        continue;\n      }\n    }\n\n    // 移到下一个词\n    addr_start = false;\n    has_at = false;\n    i++;\n  }\n\n  // 检查剩余部分\n  if (addr_start && has_at && words[ie]) {\n    var word = words[ie];\n    var is_ascii = ((word.p == POSTAG.A_NX) ||\n            (word.p == POSTAG.A_M && word.w in EMAILCHAR))\n            ? true : false;\n    if (is_ascii) {\n      var mailws = words.slice(addr_start, words.length);\n      //debug(toEmailAddress(mailws));\n      words.splice(addr_start, mailws.length, {\n        w:  toEmailAddress(mailws),\n        p:  POSTAG.URL\n      });\n    }\n  }\n\n  return words;\n};\n\n// ======================================================\n// 邮箱地址中允许出现的字符\n// 参考：http://www.cs.tut.fi/~jkorpela/rfc/822addr.html\nvar _EMAILCHAR = '!\"#$%&\\'*+-/0123456789=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ^_`abcdefghijklmnopqrstuvwxyz{|}~.'.split('');\nvar EMAILCHAR = {};\nfor (var i in _EMAILCHAR) EMAILCHAR[_EMAILCHAR[i]] = 1;\n\n\n/**\n * 根据一组单词生成邮箱地址\n *\n * @param {array} words 单词数组\n * @return {string}\n */\nvar toEmailAddress = function (words) {\n  var ret = words[0].w;\n  for (var i = 1, word; word = words[i]; i++) {\n    ret += word.w;\n  }\n  return ret;\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/ForeignTokenizer.js":"'use strict';\n\n/**\n * 外文字符、数字识别模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'tokenizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.split = function (words) {\n  var POSTAG = exports.segment.POSTAG;\n  var ret = [];\n  for (var i = 0, word; word = words[i]; i++) {\n    if (word.p) {\n      ret.push(word);\n    } else {\n      // 仅对未识别的词进行匹配\n      ret = ret.concat(splitForeign(word.w));\n    }\n  }\n  return ret;\n};\n\n// =================================================================\n/**\n * 匹配包含的英文字符和数字，并分割\n *\n * @param {string} text 文本\n * @param {int} cur 开始位置\n * @return {array}  返回格式   {w: '单词', c: 开始位置}\n */\nvar splitForeign = function (text, cur) {\n  var POSTAG = exports.segment.POSTAG;\n  if (isNaN(cur)) cur = 0;\n  var ret = [];\n  \n  // 取第一个字符的ASCII码\n  var lastcur = 0;\n  var lasttype = 0;\n  var c = text.charCodeAt(0);\n  // 全角数字或字母\n  if (c >= 65296 && c <= 65370) c -= 65248;\n  // 数字  lasttype = POSTAG.A_M\n  if (c >= 48 && c <= 57) lasttype = POSTAG.A_M;\n  // 字母 lasttype = POSTAG.A_NX\n  else if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) lasttype = POSTAG.A_NX;\n  else lasttype = POSTAG.UNK;\n  \n  for (var i = 1; i < text.length; i++) {\n    var c = text.charCodeAt(i);\n    // 全角数字或字母\n    if (c >= 65296 && c <= 65370) c -= 65248;\n    // 数字  lasttype = POSTAG.A_M\n    if (c >= 48 && c <= 57) {\n      if (lasttype !== POSTAG.A_M) {\n        var nw = {w: text.substr(lastcur, i - lastcur)};\n        if (lasttype !== POSTAG.UNK) nw.p = lasttype;\n        ret.push(nw);\n        lastcur = i;\n      }\n      lasttype = POSTAG.A_M;\n    } else if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) {\n      // 字母 lasttype = POSTAG.A_NX\n      if (lasttype !== POSTAG.A_NX) {\n        var nw = {w: text.substr(lastcur, i - lastcur)};\n        if (lasttype !== POSTAG.UNK) nw.p = lasttype;\n        ret.push(nw);\n        lastcur = i;\n      }\n      lasttype = POSTAG.A_NX;\n    } else {\n      // 其他\n      if (lasttype !== POSTAG.UNK) {\n        ret.push({\n          w:  text.substr(lastcur, i - lastcur),\n          p:  [lasttype]\n        });\n        lastcur = i;\n      }\n      lasttype = POSTAG.UNK;\n    }\n  }\n  // 剩余部分\n  var nw = {w: text.substr(lastcur, i - lastcur)};\n  if (lasttype !== POSTAG.UNK) nw.p = lasttype;\n  ret.push(nw);\n  \n  // debug(ret);\n  return ret;\n};\n//debug(splitForeign('ad222经济核算123非'));\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/PunctuationTokenizer.js":"'use strict';\n\n/**\n * 标点符号识别模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'tokenizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.split = function (words) {\n  var POSTAG = exports.segment.POSTAG;\n  var ret = [];\n  for (var i = 0, word; word = words[i]; i++) {\n    if (word.p > 0) {\n      ret.push(word);\n      continue;\n    }\n    // 仅对未识别的词进行匹配\n    var stopinfo = matchStopword(word.w);\n    if (stopinfo.length < 1) {\n      ret.push(word);\n      continue;\n    }\n    // 分离出标点符号\n    var lastc = 0;\n    for (var ui = 0, sw; sw = stopinfo[ui]; ui++) {\n      if (sw.c > lastc) {\n        ret.push({w: word.w.substr(lastc, sw.c - lastc)});\n      }\n      // 忽略空格\n      if (sw.w != ' ') {\n        ret.push({w: sw.w, p: POSTAG.D_W});\n      }\n      lastc = sw.c + sw.w.length;\n    }\n    var lastsw = stopinfo[stopinfo.length - 1];\n    if (lastsw.c + lastsw.w.length < word.w.length) {\n      ret.push({w: word.w.substr(lastsw.c + lastsw.w.length)});\n    }\n  }\n  return ret;\n};\n\n// =================================================================\n// 标点符号\nvar _STOPWORD = ' ,.;+-|/\\\\\\'\":?<>[]{}=!@#$%^&*()~`' +\n                '。，、＇：∶；?‘’“”〝〞ˆˇ﹕︰﹔﹖﹑·¨….¸;！´？！～—ˉ｜‖＂〃｀@﹫¡¿﹏﹋﹌︴々﹟#﹩$﹠&﹪%*﹡﹢﹦' +\n                '﹤‐￣¯―﹨ˆ˜﹍﹎+=<­＿_-\\ˇ~﹉﹊（）〈〉‹›﹛﹜『』〖〗［］《》〔〕{}「」【】︵︷︿︹︽_﹁﹃︻︶︸' +\n                '﹀︺︾ˉ﹂﹄︼＋－×÷﹢﹣±／＝≈≡≠∧∨∑∏∪∩∈⊙⌒⊥∥∠∽≌＜＞≤≥≮≯∧∨√﹙﹚[]﹛﹜∫∮∝∞⊙∏' +\n                '┌┬┐┏┳┓╒╤╕─│├┼┤┣╋┫╞╪╡━┃└┴┘┗┻┛╘╧╛┄┆┅┇╭─╮┏━┓╔╦╗┈┊│╳│┃┃╠╬╣┉┋╰─╯┗━┛' +\n                '╚╩╝╲╱┞┟┠┡┢┦┧┨┩┪╉╊┭┮┯┰┱┲┵┶┷┸╇╈┹┺┽┾┿╀╁╂╃╄╅╆' +\n                '○◇□△▽☆●◆■▲▼★♠♥♦♣☼☺◘♀√☻◙♂×▁▂▃▄▅▆▇█⊙◎۞卍卐╱╲▁▏↖↗↑←↔◤◥╲╱▔▕↙↘↓→↕◣◢∷▒░℡™';\n_STOPWORD = _STOPWORD.split('');\nvar STOPWORD = {};\nvar STOPWORD2 = {};\nfor (var i in _STOPWORD) {\n  if (_STOPWORD[i] == '') continue;\n  var len = _STOPWORD[i].length;\n  STOPWORD[_STOPWORD[i]] = len;\n  if (!STOPWORD2[len]) STOPWORD2[len] = {};\n  STOPWORD2[len][_STOPWORD[i]] = len;\n};\n// debug(STOPWORD2);\n// =================================================================\n\n/**\n * 匹配包含的标点符号，返回相关信息\n *\n * @param {string} text 文本\n * @param {int} cur 开始位置\n * @return {array}  返回格式   {w: '网址', c: 开始位置}\n */\nvar matchStopword = function (text, cur) {\n  if (isNaN(cur)) cur = 0;\n  var ret = [];\n  var isMatch = false;\n  while (cur < text.length) {\n    for (var i in STOPWORD2) {\n      var w = text.substr(cur, i);\n      if (w in STOPWORD2[i]) {\n        ret.push({w: w, c: cur});\n        isMatch = true;\n        break;\n      }\n    }\n    cur += isMatch === false ? 1 : w.length;\n    isMatch = false;\n  }\n  \n  return ret;\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/SingleTokenizer.js":"'use strict';\n\n/**\n * 单字切分模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'tokenizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.split = function (words) {\n  var POSTAG = exports.segment.POSTAG;\n  var ret = [];\n  for (var i = 0, word; word = words[i]; i++) {\n    if (word.p) {\n      ret.push(word);\n    } else {\n      // 仅对未识别的词进行匹配\n      ret = ret.concat(splitSingle(word.w));\n    }\n  }\n  return ret;\n};\n\n// =================================================================\n/**\n * 单字切分\n *\n * @param {string} text 要切分的文本\n * @param {int} cur 开始位置\n * @return {array}\n */\nvar splitSingle= function (text, cur) {\n  var POSTAG = exports.segment.POSTAG;\n  if (isNaN(cur)) cur = 0;\n  var ret = [];\n  while (cur < text.length) {\n    ret.push({\n      w:  text.charAt(cur),\n      p:  POSTAG.UNK\n    });\n    cur++;\n  }\n  return ret;\n};\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/URLTokenizer.js":"'use strict';\n\n/**\n * URL识别模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n\nvar debug = console.log;\n\n/** 模块类型 */\nexports.type = 'tokenizer';\n\n/**\n * 模块初始化\n *\n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.split = function (words) {\n  var POSTAG = exports.segment.POSTAG;\n  var ret = [];\n  for (var i = 0, word; word = words[i]; i++) {\n    if (word.p > 0) {\n      ret.push(word);\n      continue;\n    }\n    // 仅对未识别的词进行匹配\n    var urlinfo = matchURL(word.w);\n    if (urlinfo.length < 1) {\n      ret.push(word);\n      continue;\n    }\n    // 分离出URL\n    var lastc = 0;\n    for (var ui = 0, url; url = urlinfo[ui]; ui++) {\n      if (url.c > lastc) {\n        ret.push({w: word.w.substr(lastc, url.c - lastc)});\n      }\n      ret.push({w: url.w, p: POSTAG.URL});\n      lastc = url.c + url.w.length;\n    }\n    var lasturl = urlinfo[urlinfo.length - 1];\n    if (lasturl.c + lasturl.w.length < word.w.length) {\n      ret.push({w: word.w.substr(lasturl.c + lasturl.w.length)});\n    }\n  }\n  // debug(ret);\n  return ret;\n};\n\n// =================================================================\n// 协议URL头\nvar PROTOTAL = ['http://', 'https://', 'ftp://', 'news://', 'telnet://'];\n// 协议头最小长度\nvar MIN_PROTOTAL_LEN = 100;\nfor (var i in PROTOTAL) {\n  if (PROTOTAL[i].length < MIN_PROTOTAL_LEN) {\n    MIN_PROTOTAL_LEN = PROTOTAL[i].length;\n  }\n}\n// 允许出现在URL中的字符\nvar _URLCHAR = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        '!', '#', '$', '%', '&', '‘', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '=', '?', '@', '[', '\\\\', ']', '^', '_', '`', '|', '~'];\nvar URLCHAR = {};\nfor (var i in _URLCHAR) {\n  URLCHAR[_URLCHAR[i]] = 1;\n}\n// =================================================================\n\n/**\n * 匹配包含的网址，返回相关信息\n *\n * @param {string} text 文本\n * @param {int} cur 开始位置\n * @return {array}  返回格式   {w: '网址', c: 开始位置}\n */\nvar matchURL = function (text, cur) {\n  if (isNaN(cur)) cur = 0;\n  var ret = [];\n  var s = false;\n  while (cur < text.length) {\n    // 判断是否为 http:// 之类的文本开头\n    if (s === false && cur < text.length - MIN_PROTOTAL_LEN) {\n      for (var i = 0, prot; prot = PROTOTAL[i]; i++) {\n        if (text.substr(cur, prot.length) == prot) {\n          s = cur;\n          cur += prot.length - 1;\n          break;\n        }\n      }\n    } else if (s !== false && !(text.charAt(cur) in URLCHAR)) {\n      // 如果以http://之类开头，遇到了非URL字符，则结束\n      ret.push({\n        w:  text.substr(s, cur - s),\n        c:  s\n      });\n      s = false;\n    }\n    cur++;\n  }\n  // 检查剩余部分\n  if (s !== false) {\n    ret.push({\n      w:  text.substr(s, cur - s),\n      c:  s\n    });\n  }\n\n  return ret;\n};\n// debug(matchURL('http://www.baidu.com哈啊http://哇fdgggghttp://baidu.com/ss/'));\n","/home/travis/build/npmtest/node-npmtest-segment/node_modules/segment/lib/module/WildcardTokenizer.js":"'use strict';\n\n/**\n * 通配符识别模块\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n \nvar debug = console.log; \n \n/** 模块类型 */\nexports.type = 'tokenizer';\n\n/**\n * 模块初始化\n * \n * @param {Segment} segment 分词接口\n */\nexports.init = function (segment) {\n  exports.segment = segment;\n};\n\n/**\n * 对未识别的单词进行分词\n *\n * @param {array} words 单词数组\n * @return {array}\n */\nexports.split = function (words) {\n  var POSTAG = exports.segment.POSTAG;\n  var TABLE = exports.segment.getDict('WILDCARD');\n  var ret = [];\n  for (var i = 0, word; word = words[i]; i++) {\n    if (word.p > 0) {\n      ret.push(word);\n      continue;\n    }\n    // 仅对未识别的词进行匹配\n    var wordinfo = matchWord(word.w);\n    if (wordinfo.length < 1) {\n      ret.push(word);\n      continue;\n    }\n    // 分离出已识别的单词\n    var lastc = 0;\n    for (var ui = 0, bw; bw = wordinfo[ui]; ui++) {\n      if (bw.c > lastc) {\n        ret.push({w: word.w.substr(lastc, bw.c - lastc)});\n      }\n      ret.push({w: bw.w, p: TABLE[bw.w.toLowerCase()].p});\n      lastc = bw.c + bw.w.length;\n    }\n    var lastword = wordinfo[wordinfo.length - 1];\n    if (lastword.c + lastword.w.length < word.w.length) {\n      ret.push({w: word.w.substr(lastword.c + lastword.w.length)});\n    }\n  }\n  return ret;\n};\n\n// =================================================================\n/**\n * 匹配单词，返回相关信息\n *\n * @param {string} text 文本\n * @param {int} cur 开始位置\n * @return {array}  返回格式   {w: '单词', c: 开始位置}\n */\nvar matchWord = function (text, cur) {\n  if (isNaN(cur)) cur = 0;\n  var ret = [];\n  var s = false;\n  var TABLE = exports.segment.getDict('WILDCARD2');\n  // 匹配可能出现的单词，取长度最大的那个\n  var lowertext = text.toLowerCase();\n  while (cur < text.length) {\n    var stopword = false;\n    for (var i in TABLE) {\n      if (lowertext.substr(cur, i) in TABLE[i]) {\n        stopword = {w: text.substr(cur, i), c: cur};\n      }\n    }\n    if (stopword !== false) {\n      ret.push(stopword);\n      cur += stopword.w.length;\n    } else {\n      cur++;\n    }\n  }\n  return ret;\n};\n"}